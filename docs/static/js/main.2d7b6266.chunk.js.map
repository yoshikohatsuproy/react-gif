{"version":3,"sources":["components/AddCategory.js","helpers/getGift.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,QAK3C,SACI,uBAAOC,KAAK,OACZC,MAAST,EACTU,SAhBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,gEAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGEA,EAAUC,OAHZ,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIlC,OACI,sBAAKc,UAAU,OAAf,UACK,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCHLO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAa,IAAD,EAEXd,mBAAU,CAChCqB,KAAM,GACNa,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAmBrC,OAZAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAU,CACNf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAIGqB,EDdiBK,CAAa1B,GAA9BO,EAH4B,EAG5BA,KAH4B,EAGtBa,QAEb,OACI,qCACI,6BAAKpB,IACJ,qBAAKgB,UAAU,YAAf,SAEQT,EAAKE,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAEOA,GADGA,EAAIC,aEb1BgB,EAAe,WAAO,IAAD,EACMzC,mBAAS,CAAC,cADhB,mBACvB0C,EADuB,KACX3C,EADW,KAO9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MChBvC6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.2d7b6266.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2){\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input type=\"text\"\r\n            value = {inputValue}\r\n            onChange = {handleInputChange}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGift = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=HwtDMjNZbWDmGVMP135eRQnlvVtcnkPy `;\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({  title, url}) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card\">\r\n             <img src={url} alt={title}/>\r\n             <p>{ title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n \r\n \r\n \r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    const {data, loading} = useFetchGifs(category);\r\n \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n             <div className=\"card-grid\">\r\n                 {\r\n                     data.map( img => (\r\n                         <GifGridItem \r\n                            key = {img.id}\r\n                            {...img}\r\n                        />\r\n                     ))\r\n                 }\r\n             </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport { getGift } from '../helpers/getGift';\r\n\r\n\r\nexport const useFetchGifs = (category) =>{\r\n\r\n    const [state, setState] = useState ({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGift(category)\r\n            .then( imgs => {\r\n                setState ({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, [category])\r\n\r\n\r\n\r\n    return state;\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n \r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One Punch' ]);\r\n    \r\n//    const handleAdd = () =>{\r\n //       setCategories( [...categories, 'HunterXHunter']);\r\n   // }\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n \r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                            <GifGrid \r\n                                key = {category}\r\n                                category = {category}\r\n                            />\r\n                    ))\r\n                }\r\n \r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n \n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n \n"],"sourceRoot":""}